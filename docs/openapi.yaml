openapi: 3.0.3
info:
  title: Restaurante TPI - API
  version: 0.1.0
  description: >
    API REST del TP IAEW. CRUD de productos y pedidos, y transacción de confirmación
    con validación de stock, recálculo de total y publicación de evento.

servers:
  - url: http://localhost:8081
    description: Entorno local (Docker host 8081 → contenedor 8080)

tags:
  - name: Health
  - name: Productos
  - name: Pedidos

paths:
  /health:
    get:
      tags: [Health]
      summary: Health de la API
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  service: { type: string }
                  timestamp: { type: string, format: date-time }
              example:
                status: ok
                service: api
                timestamp: 2025-10-21T21:00:00.000Z

  /db/health:
    get:
      tags: [Health]
      summary: Health de la base de datos
      responses:
        '200':
          description: OK (DB responde)
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  now: { type: string, format: date-time }
                  db: { type: string }
                  usr: { type: string }
              example:
                ok: true
                now: 2025-10-21T21:00:00.000Z
                db: restaurante
                usr: app
        '500':
          description: Error de conexión a DB
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /productos:
    get:
      tags: [Productos]
      summary: Listar productos
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Producto' }
              example:
                - id: 4
                  nombre: Hamburguesa Clásica
                  precio: 4500.00
                  stock_actual: 50
                  activo: true
                  creado_en: 2025-10-16T20:23:42.869Z
                - id: 2
                  nombre: Papas Fritas
                  precio: 2500.00
                  stock_actual: 98
                  activo: true
                  creado_en: 2025-10-16T20:23:04.086Z
    post:
      tags: [Productos]
      summary: Crear producto
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductoCreate' }
            example:
              nombre: Ensalada César
              precio: 3900
              stock_actual: 30
              activo: true
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Producto' }

  /productos/{id}:
    get:
      tags: [Productos]
      summary: Obtener producto
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Producto' }
        '404': { description: No existe }
    put:
      tags: [Productos]
      summary: Actualizar producto
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductoUpdate' }
            example:
              nombre: Hamburguesa Doble
              precio: 5200
              stock_actual: 40
              activo: true
      responses:
        '200': { description: OK }
        '404': { description: No existe }
    delete:
      tags: [Productos]
      summary: Eliminar producto
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Eliminado }
        '404': { description: No existe }

  /pedidos:
    get:
      tags: [Pedidos]
      summary: Listar pedidos
      responses:
        '200':
          description: Lista de pedidos con totales
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Pedido' }
    post:
      tags: [Pedidos]
      summary: Crear pedido
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PedidoCreate' }
            example:
              creado_por: mozo1
              items:
                - producto_id: 4
                  cantidad: 2
                - producto_id: 2
                  cantidad: 1
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Pedido' }

  /pedidos/{id}:
    get:
      tags: [Pedidos]
      summary: Obtener pedido con items
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Pedido' }
        '404': { description: No existe }
    put:
      tags: [Pedidos]
      summary: Actualizar pedido (creado_por/estado)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PedidoUpdate' }
            example:
              creado_por: mozo2
              estado: EN_COCINA
      responses:
        '200': { description: OK }
        '404': { description: No existe }
    delete:
      tags: [Pedidos]
      summary: Eliminar pedido
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Eliminado }
        '404': { description: No existe }

  /pedidos/{id}/items:
    post:
      tags: [Pedidos]
      summary: Agregar item a pedido CREADO
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PedidoItemInput' }
            example:
              producto_id: 2
              cantidad: 1
      responses:
        '201': { description: OK }
        '400': { description: Pedido no está en CREADO }

  /pedidos/{id}/items/{itemId}:
    delete:
      tags: [Pedidos]
      summary: Eliminar item de pedido CREADO
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: itemId
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
        '400': { description: Pedido no está en CREADO }

  /pedidos/{id}/confirmar:
    post:
      tags: [Pedidos]
      summary: Confirmar pedido (valida stock, recalcula total, descuenta stock y cambia estado)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Pedido confirmado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Pedido' }
              example:
                id: 8
                estado: CONFIRMADO
                total: 11500.00
                creado_por: mozo1
                creado_en: 2025-10-21T21:03:32.842Z
                items:
                  - id: 101
                    producto_id: 4
                    cantidad: 2
                    precio_unitario: 4500
                    subtotal: 9000
                  - id: 102
                    producto_id: 2
                    cantidad: 1
                    precio_unitario: 2500
                    subtotal: 2500
        '400':
          description: Error (stock insuficiente u otra)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
              example:
                error: Stock insuficiente para producto 4

components:
  schemas:
    Error:
      type: object
      properties:
        error: { type: string }

    Producto:
      type: object
      properties:
        id: { type: integer }
        nombre: { type: string }
        precio: { type: number, format: double }
        stock_actual: { type: integer }
        activo: { type: boolean }
        creado_en: { type: string, format: date-time }
      required: [id, nombre, precio, stock_actual, activo, creado_en]

    ProductoCreate:
      type: object
      required: [nombre, precio]
      properties:
        nombre: { type: string }
        precio: { type: number, format: double, minimum: 0 }
        stock_actual: { type: integer, minimum: 0, default: 0 }
        activo: { type: boolean, default: true }

    ProductoUpdate:
      type: object
      properties:
        nombre: { type: string }
        precio: { type: number, format: double, minimum: 0 }
        stock_actual: { type: integer, minimum: 0 }
        activo: { type: boolean }

    PedidoItem:
      type: object
      properties:
        id: { type: integer }
        producto_id: { type: integer }
        cantidad: { type: integer, minimum: 1 }
        precio_unitario: { type: number, format: double }
        subtotal: { type: number, format: double }
      required: [id, producto_id, cantidad]

    PedidoItemInput:
      type: object
      required: [producto_id, cantidad]
      properties:
        producto_id: { type: integer }
        cantidad: { type: integer, minimum: 1 }

    Pedido:
      type: object
      properties:
        id: { type: integer }
        estado:
          type: string
          enum: [CREADO, CONFIRMADO, EN_COCINA, LISTO, ENTREGADO, CANCELADO]
        total: { type: number, format: double }
        creado_por: { type: string, nullable: true }
        creado_en: { type: string, format: date-time }
        items:
          type: array
          items: { $ref: '#/components/schemas/PedidoItem' }
      required: [id, estado, total, creado_en, items]

    PedidoCreate:
      type: object
      properties:
        creado_por: { type: string }
        items:
          type: array
          items:
            $ref: '#/components/schemas/PedidoItemInput'
      required: [items]

    PedidoUpdate:
      type: object
      properties:
        creado_por: { type: string }
        estado:
          type: string
          enum: [CREADO, CONFIRMADO, EN_COCINA, LISTO, ENTREGADO, CANCELADO]
